{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["team","name","uid","Board","props","react_default","a","createElement","className","css","_templateObject","_templateObject2","wins","kills","kd","matchesplayed","winrate","LeaderBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","statApi","fetch","then","response","json","setState","console","log","map","hit","App_Board","key","username","totals","hoursplayed","Component","App","_this3","cx","_templateObject3","member","App_LeaderBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3b089f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { css, cx } from \"emotion\";\n// import Client from \"fortnite\";\nimport \"./App.css\";\n\n// const fortnite = new Client(\"425c6cf9-c137-4149-977f-377b7bd33f06\");\n\nconst team = [\n  { name: \"iamfabriceg\", uid: \"2b7897075f20421b81529bdc2ab742f3\" },\n  { name: \"SKIDIP lukyvj\", uid: \"ff29ca89e591485e8d450c2aec558c15\" },\n  { name: \"SKIPID AntShelby\", uid: \"c605a87eba634e8dbfc7fba4448fa87d\" },\n  { name: \"SKIDIP Kingom\", uid: \"0d4f175a990f44a08e0447b56ed42703\" }\n];\n\nconst Board = props => (\n  <div\n    className={css`\n      height: 40vh;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      width: 100%;\n      p {\n        border-bottom: 1px dashed;\n        flex: 0 1 100%;\n        display: flex;\n        justify-content: space-between;\n      }\n    `}\n  >\n    <h1>@{props.name}</h1>\n    <div\n      className={css`\n        width: 100%;\n        max-width: 500px;\n      `}\n    >\n      {/* <p>\n        hoursplayed: <b>{props.hoursplayed}</b>\n      </p> */}\n      <p>\n        <span>wins:</span> <b>{props.wins}</b>\n      </p>\n      <p>\n        <span>kills:</span> <b>{props.kills}</b>\n      </p>\n      <p>\n        <span>k/d:</span> <b>{props.kd}</b>\n      </p>\n      <p>\n        <span>matchesplayed:</span> <b>{props.matchesplayed}</b>\n      </p>\n      <p>\n        <span>winrate:</span> <b>{props.winrate}</b>\n      </p>\n    </div>\n  </div>\n);\n\nclass LeaderBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let statApi =\n      \"https://fortnite-public-api.theapinetwork.com/prod09/users/public/br_stats?user_id=\" +\n      this.props.uid +\n      \"&platform=ps4\";\n    fetch(statApi)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ data: [data] });\n      });\n  }\n\n  render() {\n    console.log(this.state.data);\n\n    return this.state.data.map(hit => (\n      <Board\n        key={hit.uid}\n        name={hit.username}\n        wins={hit.totals.wins}\n        kills={hit.totals.kills}\n        kd={hit.totals.kd}\n        matchesplayed={hit.totals.matchesplayed}\n        winrate={hit.totals.winrate}\n        hoursplayed={hit.totals.hoursplayed}\n      />\n    ));\n  }\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div className={cx(\"App\")}>\n        <h1>SKIDIP</h1>\n        <div\n          className={cx(\n            css`\n              display: grid;\n              grid-template-columns: repeat(2, 1fr);\n              grid-gap: 10px;\n              grid-auto-rows: minmax(100px, auto);\n            `\n          )}\n        >\n          {team.map(member => {\n            return <LeaderBoard uid={member.uid} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}